version: "3.8"

services:
  kafka:
    container_name: kafka
    image: docker.io/bitnami/kafka:3.5.1
    user: root
    ports:
      - "9092:9092"
    volumes:
      - "kafka_data:/bitnami"
      - "./certs:/certs"
    environment:
      # KRaft settings
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      # Listeners
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      # Security
      - KAFKA_SECURITY_PROTOCOL=SSL
      - KAFKA_SSL_KEYSTORE_LOCATION=/certs/kafka.keystore.jks
      - KAFKA_SSL_KEYSTORE_PASSWORD=Password123++
      - KAFKA_SSL_KEY_PASSWORD=Password123++
      - KAFKA_SSL_TRUSTSTORE_LOCATION=/certs/kafka.truststore.jks
      - KAFKA_SSL_TRUSTSTORE_PASSWORD=Password123++
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server kafka:9092 --topic hc --create --if-not-exists && kafka-topics.sh --bootstrap-server kafka:9092 --topic hc --describe"]
      interval: 10s
      timeout: 5s
      retries: 5
  producer:
    build:
      context: ./js-producer
      dockerfile: Dockerfile
    volumes:
      - "./certs:/certs"
    ports:
      - "8090:8090"
    depends_on:
      kafka:
        condition: service_healthy
  consumer:
    build:
      context: ./js-consumer
      dockerfile: Dockerfile
    volumes:
      - "./certs:/certs"
    depends_on:
      kafka:
        condition: service_healthy

volumes:
  kafka_data:
    driver: local
